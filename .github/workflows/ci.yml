name: ESP-IDF Button Component CI

on:
  push:
    branches: [ main, master, develop ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
  pull_request:
    branches: [ main, master, develop ]
    paths-ignore:
      - '**.md'
      - 'docs/**'

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Cache Docker layers
      uses: actions/cache@v4
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-buildx-
          
    - name: Build and run tests
      run: |
        cd test
        # Check if docker-compose is available
        if command -v docker-compose > /dev/null 2>&1; then
          DOCKER_COMPOSE="docker-compose"
        elif docker compose version > /dev/null 2>&1; then
          DOCKER_COMPOSE="docker compose"
        else
          echo "Using Docker directly as Docker Compose is not available"
          chmod +x run-tests-docker.sh
          ./run-tests-docker.sh
          exit $?
        fi
        
        # If we get here, we have Docker Compose
        $DOCKER_COMPOSE build
        $DOCKER_COMPOSE run --rm test \
          --cov=button_longpress \
          --cov-report=xml:results/coverage.xml \
          --cov-report=html:results/htmlcov \
          --junitxml=results/junit.xml \
          --html=results/test-report.html \
          --self-contained-html
      
    - name: Upload test results
      uses: actions/upload-artifact@v4
      with:
        name: test-results
        path: |
          test/results/junit.xml
          test/results/htmlcov/
          test/results/test-report.html
          test/results/coverage.xml
        retention-days: 30
        if-no-files-found: warn
      if: always()
      
    - name: Publish Test Report
      uses: mikepenz/action-junit-report@v4
      if: always()
      with:
        report_paths: 'test/results/junit.xml'
        fail_on_failure: true
        require_tests: true
        check_name: 'Test Results'
        
    - name: Check test coverage
      run: |
        cd test
        if [ -f "results/coverage.xml" ]; then
          # Extract coverage rate and convert to percentage using python
          COVERAGE=$(python3 -c "
import xml.etree.ElementTree as ET
import sys
try:
    tree = ET.parse('results/coverage.xml')
    root = tree.getroot()
    line_rate = float(root.get('line-rate', 0))
    coverage = round(line_rate * 100, 2)
    print(coverage)
except Exception as e:
    print(0)
    sys.exit(1)
")
          
          echo "Coverage: $COVERAGE%"
          echo "COVERAGE=$COVERAGE" >> $GITHUB_ENV
          
          # Use python for floating point comparison
          RESULT=$(python3 -c "
coverage = float('$COVERAGE')
threshold = 80.0
if coverage >= threshold:
    print('pass')
else:
    print('fail')
")
          
          if [ "$RESULT" = "fail" ]; then
            echo "::error::Test coverage ($COVERAGE%) is below 80%"
            exit 1
          else
            echo "::notice::Test coverage: $COVERAGE%"
          fi
        else
          echo "::warning::Coverage report not found"
        fi
      if: success()
      
    - name: Comment coverage on PR
      if: github.event_name == 'pull_request' && success()
      uses: actions/github-script@v7
      with:
        script: |
          const coverage = process.env.COVERAGE;
          if (coverage) {
            const body = `## 📊 Test Coverage Report
            
            **Coverage: ${coverage}%**
            
            ${coverage >= 80 ? '✅' : '❌'} Coverage ${coverage >= 80 ? 'meets' : 'below'} the 80% threshold
            
            📁 [View detailed coverage report](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
            });
          }
